# encoding: utf-8
"""

func:
"""
import random
import string
import time
import sys
from rediscluster import StrictRedisCluster


cluster_nodes = [{'host':'10.101.130.68','port': 7001},
                 {'host':'10.101.130.68','port': 7002},
                 {'host':'10.101.130.68','port': 7003},
                 {'host':'10.101.130.69','port': 7001},
                 {'host':'10.101.130.69','port': 7002},
                 {'host':'10.101.130.69','port': 7003}]
try:
    rc = StrictRedisCluster(startup_nodes=cluster_nodes, decode_responses=True)
except Exception, err:
    print err
    print 'failed to connect redis cluster!'
    sys.exit(0)


def random_str():
    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(7))


def init_keys():
    start_time = time.time()
    for i in xrange(0, 2000):
        key_name = 'dba_' + str(i)
        value_name = random_str()
        rc.set(key_name, value_name)
    print 'initial keys successfully,use time:', time.time() - start_time


def del_keys_without_pipe():
    start_time = time.time()
    result_length = 0
    for key in rc.scan_iter(match='dba_*', count=2000):
        rc.delete(key)
        result_length += 1
    print "normal ways end at:", time.time() - start_time
    print "normal ways delete numbers:", result_length


def del_keys_with_pipe():
    start_time = time.time()
    result_length = 0
    pipe = rc.pipeline()
    for key in rc.scan_iter(match='dba_*', count=5000):
        pipe.delete(key)
        result_length += 1
        if result_length % 5000 == 0:
            pipe.execute()
    pip_time = time.time()
    print "use pipeline scan time ", time.time() - start_time
    pipe.execute()

    print "use pipeline end at:", time.time() - pip_time
    print "use pipeline ways delete numbers:", result_length


def main():
    init_keys()
    del_keys_without_pipe()
    init_keys()
    del_keys_with_pipe()

if __name__ == '__main__':
    main()
